import datetime
import json
from h3 import h3
import click

# Receber um lat long e processar com o h3 do uber
# https://github.com/uber/h3

# Converter o h3 para um geojson


def create_first_user():
    pass


def create_coord():
    geoJson = {
        "coordinates": [
            [
                [
                    -40.77489605333545,
                    -9.440159150871409
                ],
                [
                    -40.59744034282346,
                    -9.475167871518508
                ],
                [
                    -40.52054286826885,
                    -9.399311148672922
                ],
                [
                    -40.46139096476449,
                    -9.422653455873089
                ],
                [
                    -40.40223906126019,
                    -9.33511169771009
                ],
                [
                    -40.366747919157575,
                    -9.370131051250254
                ],
                [
                    -40.254359302500376,
                    -9.043148118778191
                ],
                [
                    -40.13014030514228,
                    -9.101560029609118
                ],
                [
                    -39.95268459463034,
                    -9.037306405358578
                ],
                [
                    -39.89944788147642,
                    -8.821096910845284
                ],
                [
                    -39.68058583851143,
                    -8.79771526963377
                ],
                [
                    -39.68058583851143,
                    -8.645698773665742
                ],
                [
                    -39.38482632099081,
                    -8.540420581652086
                ],
                [
                    -39.20737061047885,
                    -8.68663237065536
                ],
                [
                    -38.53303891053355,
                    -8.821096910845284
                ],
                [
                    -37.74631859393003,
                    -8.832787176447994
                ],
                [
                    -37.480135028161556,
                    -8.949669369192463
                ],
                [
                    -37.00100460977853,
                    -9.294251338702693
                ],
                [
                    -36.510043810695635,
                    -9.224193924199497
                ],
                [
                    -36.0664045344152,
                    -8.902920970099714
                ],
                [
                    -35.65825640023735,
                    -8.826942089946428
                ],
                [
                    -35.14955003010314,
                    -8.873700184186163
                ],
                [
                    -34.8242145608304,
                    -7.931588483218917
                ],
                [
                    -34.83271679511745,
                    -7.54191045699352
                ],
                [
                    -35.276356071397885,
                    -7.3776870049404835
                ],
                [
                    -35.57211558891848,
                    -7.659174859580759
                ],
                [
                    -36.31742957306898,
                    -7.8232907081236505
                ],
                [
                    -36.642765042340756,
                    -8.139616366587404
                ],
                [
                    -36.96810051161353,
                    -8.309392551867319
                ],
                [
                    -37.17513217387767,
                    -8.180603471070953
                ],
                [
                    -37.252029648432284,
                    -7.958051915058988
                ],
                [
                    -37.36441826509051,
                    -7.963910098453937
                ],
                [
                    -37.263860029133156,
                    -7.829150802188408
                ],
                [
                    -37.18696255457854,
                    -7.612272943482196
                ],
                [
                    -37.20470812562883,
                    -7.319020927245319
                ],
                [
                    -37.76073601856746,
                    -7.682623883585336
                ],
                [
                    -38.12156262994182,
                    -7.852590353731884
                ],
                [
                    -38.582947477273535,
                    -7.776406996013463
                ],
                [
                    -39.04433232460431,
                    -7.858450035138233
                ],
                [
                    -39.765985547354035,
                    -7.3776870049404835
                ],
                [
                    -40.55735437822352,
                    -7.416499438916617
                ],
                [
                    -40.51003285542106,
                    -7.88550047573294
                ],
                [
                    -40.60467590102695,
                    -8.25446650846608
                ],
                [
                    -41.13704303256387,
                    -8.611391336881837
                ],
                [
                    -40.79987718259025,
                    -8.927077297926047
                ],
                [
                    -40.63425185277916,
                    -9.224974654928062
                ],
                [
                    -40.77489605333545,
                    -9.440159150871409
                ]
            ]
        ],
        "type": "Polygon"
    }

    hexagons = h3.polyfill(geoJson, 8)

    print(hexagons)
    print(h3.h3_to_geo_boundary(list(hexagons)[0], geo_json=True))

    geojson_out = {
        "type": "FeatureCollection",
        "features": []
    }

    for i in hexagons:
        geojson_out["features"].append({
            "type": "Feature",
            "properties": {
                "identifier": i
            },
            "geometry": {
                "type": "Polygon",
                "coordinates": [
                    [(coord[1], coord[0])
                     for coord in h3.h3_to_geo_boundary(i, geo_json=True)]
                ]
            }
        })

    with open("output.geojson", "w") as outfile:
        json.dump(geojson_out, outfile)


def run():
    create_coord()


if __name__ == '__main__':
    run()
